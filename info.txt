
settings:
  env:
    BASE_DIR: /home/taurus/taurus_container_scripts  # 脚本目录
  artifacts-dir: /home/taurus/taurus_container_artifacts/simple1/%Y-%m-%d_%H-%M  # path where to save artifacts, default is %Y-%m-%d_%H-%M-%S.%f

scenarios:
  my_scenario:
    requests:
- label: Home
        url: /       #路径
        method: GET  #请求方式

execution:
- concurrency: 10#并发线程数
  ramp-up: 1m# 启动时间
  hold-for: 2m30s# 持续时间
  scenario:        # 测试场景
default-address: http://www.example.com/  # 请求地址
    requests:
- include-scenario: my_scenario  # 场景名称

reporting:
- module: final-stats # 摘要报告
- module: console     # 控制台

modules:
    jmeter:
        download-link: 'https://mirrors.tuna.tsinghua.edu.cn/apache//jmeter/binaries/apache-jmeter-{version}.zip'# 下载地址
        version: 5.2.1# 版本号


import json
import yaml

# 定义YAML配置，直接插入JSON对象的键值对
yaml_config = {
    'version': '1.0',
    'execution': [{'scenario': 'simple-scenario'}],
    'scenarios': {
        'simple-scenario': {
            'requests': [
                {
                    'url': 'http://example.com/api/resource',
                    'method': 'POST',
                    'headers': {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer your_token'
                    },
                    'body': {
                        "key1": "value1",
                        "key2": "value2"
                    },
                    'assert': [
                        {'contains': ['success'], 'subject': 'body'},
                        {'contains': ['200'], 'subject': 'http-code'}
                    ]
                }
            ]
        }
    },
    'reporting': [{'module': 'final-stats'}]
}

# 将配置写入YAML文件
with open('config.yml', 'w') as yaml_file:
    yaml.dump(yaml_config, yaml_file, default_flow_style=False)

print("YAML配置文件已生成：config.yml")



version: '1.0'
execution:
- scenario: simple-scenario
scenarios:
  simple-scenario:
    requests:
    - url: http://example.com/api/resource
      method: POST
      headers:
        Content-Type: application/json
        Authorization: Bearer your_token
      body:
        key1: value1
        key2: value2
      assert:
      - contains:
        - success
        subject: body
      - contains:
        - '200'
        subject: http-code
reporting:
- module: final-stats





new_string = ','.join(col for col in old_string.split(',') if col not in ('col2', 'col4'))

1.EDIT DELETE RESULT 可以修改为第一个字母大写。
2.没有的style全部可以删掉
3.每个都有save run,最后还有个Batch jobs run
4.添加来个下拉
5.log是上拉
6.有些图标需要引入新版本才能显示
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
7.UI算是搞完了，现在剩下，前段逻辑，后端数据，上拉 添加，下拉 log。 单删，单run

8.表设计,灌入数据,select不太好整

9. 右侧三个按钮，编辑，删除，运行，运行这个log先不做，以后想更好的方案，
目前就是run变成转圈圈的running就好，完成后给个中间弹窗。
run的时候，还是将data通过json传到后端，后端不用保存看看能不能直接跑起来。就想查数据一样。

10. Add new testcase, 进来后空荡荡。。 可以写死一个card, 然后用户网里面填，填好后点击 save就跳到case的页面。

11.优先级最高：点击run,弹出上拉log框，所有参数沿用之前。

yum install libxml2-devel xmlsec1-devel xmlsec1-openssl-devel libtool-ltdl-devel


def get_table_columns_str2(self, remove_col_list, pi):
    columns = []
    if ',' in pi:
        exclude_list = pi.split(',')
        for columnName in self.column_list:
            if columnName[0] not in remove_col_list and columnName[0].upper() not in exclude_list:
                columns.append(columnName[0].upper())
    else:
        for columnName in self.column_list:
            if columnName[0] not in remove_col_list and columnName[0] != pi:
                columns.append(columnName[0].upper())
    res = ','.join(columns)
    # self.logger.info('get_table_columns_str: ' + res)
    return res



job表
job id, job name, job
Job:source point, target point, source condition, target condition, select rules, custom rules,By fields

{
  "source point": "test-point4",
  "target point": "test-point6",
  "source condition": "condition111",
  "target condition": "condition111",
  "select rules": "Check-count",
  "custom rules": "aaaa",
  "fields": "testfields",
}


{
                'job_name': job_name,
                'job': {
                    "source_point": source_point,
                    "target_point": target_point,
                    "source_condition": source_condition,
                    "target_condition": target_condition,
                    "select_rules": select_rules,
                    "custom_rules": custom_rules,
                    "fields": fields,
                }



UPDATE xcheck.job_management set job='{"source_point": "test-point4","target_point": "test-point6","source_condition": "condition111","target_condition": "condition111","select_rules": "Check-count","custom_rules": "aaaa","fields": "testfields"}' where job_id=500 
 
CREATE TABLE my_table (
  id SERIAL PRIMARY KEY,
  task JSONB
);

INSERT INTO task VALUES ('{"source": "a3", "target": "b3"}');

SELECT * FROM task WHERE task->>'source' = 'a3';




create sequence xcheck.generator_job_id increment by 1 minvalue 1 no maxvalue start with 500;

CREATE TABLE IF NOT EXISTS xcheck.job_management
(
    job_id integer NOT NULL DEFAULT nextval('xcheck.generator_job_id'::regclass),
    job_name character(200) COLLATE pg_catalog."default",
    user_id integer,
    job JSONB,
    create_date timestamp without time zone,
    PRIMARY KEY (job_id)
)


INSERT INTO xcheck.job_management(job_name,user_id,job) VALUES ('jobtest1',580515,'{"source": "a3", "target": "b3"}');



















create sequence xcheck.generator_connection_id increment by 1 minvalue 1 no maxvalue start with 10000;

CREATE TABLE IF NOT EXISTS xcheck.connection_management
(
    connect_id integer NOT NULL DEFAULT nextval('xcheck.generator_connection_id'::regclass),
    connect_name character(200) COLLATE pg_catalog."default",
    user_id integer,
	dbtype character(20) COLLATE pg_catalog."default",
	connect_type character(50) COLLATE pg_catalog."default",
	host character(100) COLLATE pg_catalog."default",
	dblibrary character(100) COLLATE pg_catalog."default",
	username character(100) COLLATE pg_catalog."default",
	pwd character(100) COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    PRIMARY KEY (connect_id)
)



create sequence xcheck.generator_point_id increment by 1 minvalue 1 no maxvalue start with 500;

CREATE TABLE IF NOT EXISTS xcheck.point_management
(
    point_id integer NOT NULL DEFAULT nextval('xcheck.generator_point_id'::regclass),
    point_name character(200) COLLATE pg_catalog."default",
    user_id integer,
    connect_id integer,
    table_name character(200) COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    PRIMARY KEY (point_id)
)




function makeAjaxRequest(url, method, data) {
  return new Promise(function(resolve, reject) {
    $.ajax({
      url: url,
      method: method,
      data: data,
      success: function(result) {
        resolve(result);
      },
      error: function(error) {
        reject(error);
      }
    });
  });
}

makeAjaxRequest("first-url", "GET")
  .then(function(result) {
    // 第一个 AJAX 请求成功后执行下一个请求
    return makeAjaxRequest("second-url", "POST", { data: "some data" });
  })
  .then(function(result) {
    // 第二个 AJAX 请求成功后执行下一个请求
    return makeAjaxRequest("third-url", "GET");
  })
  .then(function(result) {
    // 第三个 AJAX 请求成功后执行下一个请求
  })
  .catch(function(error) {
    console.error(error);
  });


df -h /home

find /home -type f -size +500M -exec ls -lh {} \;


ln -s /tmp/new_folder /home/db/old_folder # 创建软链接

ln -s /dev/test111 /run/newname

从磁盘充足的/dev/test111，创建一个链接到 /run/newname 


sudo kill $(sudo lsof -t -i:5555)

pip3 install gunicorn
gunicorn -v

nohup gunicorn --preload -w 4 -b 0.0.0.0:5000 --access-logfile access.log --error-logfile error.log ginger:app


role group
user team

about Teams
https://learn.microsoft.com/en-us/microsoftteams/assign-roles-permissions


有4个词
每个词下面有解释

然后有一个流程图说明4个词之间的关系


多个user组成team：可以共享比如public test case, public connection, public point，
group初步划分为：admin(role:administrator), data test（data-engineer:Full access, data-guest:View only）,web test（web-engineer:Full access, web-guest:View only）,API test（View only, Full access）,

一个用户可以加入一个或者多个group,大权限覆盖小权限。

认证(authentication) 和授权(authorization)


