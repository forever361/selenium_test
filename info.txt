
https://dl.google.com/linux/chrome/rpm/stable/x86_64/google-chrome-stable-136.0.7103.113-1.x86_64.rpm
http://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_136.0.7103.113-1_amd64.deb

136.0.7103.113-1



Here are the conclusions of today's discussion:

1.Support file (csv) as the source for validation scenarios.
2.For Metadata validation, users can configure the rules for the source and target themselves.
3.Consider better solutions for NFT in the future.

Let me know if I overlooked any important points，thanks!


1.EDIT DELETE RESULT 可以修改为第一个字母大写。
2.没有的style全部可以删掉
3.每个都有save run,最后还有个Batch jobs run
4.添加来个下拉
5.log是上拉
6.有些图标需要引入新版本才能显示
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
7.UI算是搞完了，现在剩下，前段逻辑，后端数据，上拉 添加，下拉 log。 单删，单run

8.表设计,灌入数据,select不太好整

9. 右侧三个按钮，编辑，删除，运行，运行这个log先不做，以后想更好的方案，
目前就是run变成转圈圈的running就好，完成后给个中间弹窗。
run的时候，还是将data通过json传到后端，后端不用保存看看能不能直接跑起来。就想查数据一样。

10. Add new testcase, 进来后空荡荡。。 可以写死一个card, 然后用户网里面填，填好后点击 save就跳到case的页面。

11.优先级最高：点击run,弹出上拉log框，所有参数沿用之前。


def get_table_columns_str2(self, remove_col_list, pi):
    columns = []
    if ',' in pi:
        exclude_list = pi.split(',')
        for columnName in self.column_list:
            if columnName[0] not in remove_col_list and columnName[0].upper() not in exclude_list:
                columns.append(columnName[0].upper())
    else:
        for columnName in self.column_list:
            if columnName[0] not in remove_col_list and columnName[0] != pi:
                columns.append(columnName[0].upper())
    res = ','.join(columns)
    # self.logger.info('get_table_columns_str: ' + res)
    return res



job表
job id, job name, job
Job:source point, target point, source condition, target condition, select rules, custom rules,By fields

{
  "source point": "test-point4",
  "target point": "test-point6",
  "source condition": "condition111",
  "target condition": "condition111",
  "select rules": "Check-count",
  "custom rules": "aaaa",
  "fields": "testfields",
}


{
                'job_name': job_name,
                'job': {
                    "source_point": source_point,
                    "target_point": target_point,
                    "source_condition": source_condition,
                    "target_condition": target_condition,
                    "select_rules": select_rules,
                    "custom_rules": custom_rules,
                    "fields": fields,
                }



UPDATE xcheck.job_management set job='{"source_point": "test-point4","target_point": "test-point6","source_condition": "condition111","target_condition": "condition111","select_rules": "Check-count","custom_rules": "aaaa","fields": "testfields"}' where job_id=500 
 
CREATE TABLE my_table (
  id SERIAL PRIMARY KEY,
  task JSONB
);

INSERT INTO task VALUES ('{"source": "a3", "target": "b3"}');

SELECT * FROM task WHERE task->>'source' = 'a3';




create sequence xcheck.generator_job_id increment by 1 minvalue 1 no maxvalue start with 500;

CREATE TABLE IF NOT EXISTS xcheck.job_management
(
    job_id integer NOT NULL DEFAULT nextval('xcheck.generator_job_id'::regclass),
    job_name character(200) COLLATE pg_catalog."default",
    user_id integer,
    job JSONB,
    create_date timestamp without time zone,
    PRIMARY KEY (job_id)
)


INSERT INTO xcheck.job_management(job_name,user_id,job) VALUES ('jobtest1',580515,'{"source": "a3", "target": "b3"}');



















create sequence xcheck.generator_connection_id increment by 1 minvalue 1 no maxvalue start with 10000;

CREATE TABLE IF NOT EXISTS xcheck.connection_management
(
    connect_id integer NOT NULL DEFAULT nextval('xcheck.generator_connection_id'::regclass),
    connect_name character(200) COLLATE pg_catalog."default",
    user_id integer,
	dbtype character(20) COLLATE pg_catalog."default",
	connect_type character(50) COLLATE pg_catalog."default",
	host character(100) COLLATE pg_catalog."default",
	dblibrary character(100) COLLATE pg_catalog."default",
	username character(100) COLLATE pg_catalog."default",
	pwd character(100) COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    PRIMARY KEY (connect_id)
)



create sequence xcheck.generator_point_id increment by 1 minvalue 1 no maxvalue start with 500;

CREATE TABLE IF NOT EXISTS xcheck.point_management
(
    point_id integer NOT NULL DEFAULT nextval('xcheck.generator_point_id'::regclass),
    point_name character(200) COLLATE pg_catalog."default",
    user_id integer,
    connect_id integer,
    table_name character(200) COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    PRIMARY KEY (point_id)
)




function makeAjaxRequest(url, method, data) {
  return new Promise(function(resolve, reject) {
    $.ajax({
      url: url,
      method: method,
      data: data,
      success: function(result) {
        resolve(result);
      },
      error: function(error) {
        reject(error);
      }
    });
  });
}

makeAjaxRequest("first-url", "GET")
  .then(function(result) {
    // 第一个 AJAX 请求成功后执行下一个请求
    return makeAjaxRequest("second-url", "POST", { data: "some data" });
  })
  .then(function(result) {
    // 第二个 AJAX 请求成功后执行下一个请求
    return makeAjaxRequest("third-url", "GET");
  })
  .then(function(result) {
    // 第三个 AJAX 请求成功后执行下一个请求
  })
  .catch(function(error) {
    console.error(error);
  });


df -h /home

find /home -type f -size +500M -exec ls -lh {} \;


ln -s /tmp/new_folder /home/db/old_folder # 创建软链接

ln -s /dev/test111 /run/newname

从磁盘充足的/dev/test111，创建一个链接到 /run/newname 




    用户（User）：用户是指使用系统、服务或资源的个体或实体，可以是个人、组织、系统或其他实体。用户通过登录或访问凭据进行身份验证，并根据其角色和权限访问系统或资源。

    团队（Team）：团队是由多个用户组成的集合，共同协作以实现共同的目标或完成特定任务。团队可以包括不同角色和技能的用户，他们共享资源和信息，相互合作以提高效率和成果。

    组（Group）：组是一种将用户进行分类和管理的方式，通常基于共享的角色、权限或工作功能。一个组可以包含一个或多个用户，并为其提供共同的访问权限和功能。用户可以加入一个或多个组，以便根据其需求和职责来访问系统或资源。

    角色（Role）：角色定义了用户在团队或组织中的职责、权限和访问级别。每个角色可以与一个或多个组相关联，并为具有该角色的用户提供相应的权限。角色可以是管理员、数据工程师、访客或其他自定义的职能。


    用户 (User): A user refers to an individual or entity that uses a system, service, or resource. It can be a person, organization, system, or other entity. Users are authenticated through login or access credentials and access systems or resources based on their roles and permissions.

    团队 (Team): A team is a collection of multiple users who collaborate to achieve common goals or complete specific tasks. Teams can include users with different roles and skills, sharing resources and information, and working together to improve efficiency and outcomes.

    组 (Group): A group is a way of categorizing and managing users, typically based on shared roles, permissions, or job functions. A group can include one or multiple users and provides them with shared access permissions and functionalities. Users can join one or multiple groups to access systems or resources based on their needs and responsibilities.

    角色 (Role): Roles define the responsibilities, permissions, and access levels of users within a team or organization. Each role can be associated with one or more groups and provides corresponding permissions to users with that role. Roles can be administrators, data engineers, guests with limited access, or other custom-defined functions.



