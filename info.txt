
核心是自己价值和能力的提现，看看下面写的有没有问题


1. 引言
简要介绍会议主题和目的。强调你对新岗位的兴趣和热情，以及你愿意为实现公司目标做出贡献

2.为何适合新岗位
提到个人的愿望和目标，为什么是适合的人选，还可以简要说明你的技能和经验与新岗位的要求如何匹配。例如，强调你的领导能力、创新能力等。

3.对新岗位的理解
产品的理解，项目的理解，角色和职责的理解，与各个接口人的沟通
包括定位目标、重要功能、当前状态和待解决的问题（现状剖析）

4.面临的问题，领导关注的问题，假如你上你会做什么，能给领导解决什么样的问题。领导期望你还需要有什么
4.1.项目稳定性和交付质量（什么是重点需要抓，遇到什么问题应该如何解决）

可以详细说明你如何确保项目的稳定性和交付质量，包括你采取的措施和应对的挑战。
强调你对客户满意度的重视，以及你如何与客户合作解决问题。

重点就是，项目的进度、质量和客户满意度。比如XXX项目还属于审计范围，更应该紧密与客户保持配合合作。
遇到问题如何解决，可能需要之前的一些例子和历史经验，过去的挑战和解决方案。在解决问题的部分，可以具体说明你的解决方案和行动计划，以及你过去解决类似问题的经验和成果。
有项目的各种交付,包括进度、质量和任何潜在的风险。有XXX产品的一些商业化支撑。

4.2.未来战略规划（未来的规划和想法，要加上自己的亮点）
展示你对公司业务的理解，以及你的战略规划能力。
提到你对公司目标的理解，并且说明你如何制定战略计划来实现这些目标。
如何引领团队实现公司的长远目标。

4.3.团队协作，稳定性和积极性
讨论你与团队成员之间的协作和沟通方式。
提到你如何解决团队内部的冲突和问题，以确保团队顺利运作。可以具体举例说明你如何促进团队协作和积极性，以及你如何解决团队内部的冲突，确保团队运作顺利。


5.创新和改进能力： E领导可能会期待你具有创新和改进能力。他希望你能够不断提出新想法，改进工作流程，并且推动团队不断进步和发展。技术专家的角度。

6.员工发展和团队建设： E领导关心团队成员的发展和团队建设。他希望你能够帮助团队成员提升能力，促进团队的发展和壮大。






1.EDIT DELETE RESULT 可以修改为第一个字母大写。
2.没有的style全部可以删掉
3.每个都有save run,最后还有个Batch jobs run
4.添加来个下拉
5.log是上拉
6.有些图标需要引入新版本才能显示
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
7.UI算是搞完了，现在剩下，前段逻辑，后端数据，上拉 添加，下拉 log。 单删，单run

8.表设计,灌入数据,select不太好整

9. 右侧三个按钮，编辑，删除，运行，运行这个log先不做，以后想更好的方案，
目前就是run变成转圈圈的running就好，完成后给个中间弹窗。
run的时候，还是将data通过json传到后端，后端不用保存看看能不能直接跑起来。就想查数据一样。

10. Add new testcase, 进来后空荡荡。。 可以写死一个card, 然后用户网里面填，填好后点击 save就跳到case的页面。

11.优先级最高：点击run,弹出上拉log框，所有参数沿用之前。

yum install libxml2-devel xmlsec1-devel xmlsec1-openssl-devel libtool-ltdl-devel


def get_table_columns_str2(self, remove_col_list, pi):
    columns = []
    if ',' in pi:
        exclude_list = pi.split(',')
        for columnName in self.column_list:
            if columnName[0] not in remove_col_list and columnName[0].upper() not in exclude_list:
                columns.append(columnName[0].upper())
    else:
        for columnName in self.column_list:
            if columnName[0] not in remove_col_list and columnName[0] != pi:
                columns.append(columnName[0].upper())
    res = ','.join(columns)
    # self.logger.info('get_table_columns_str: ' + res)
    return res



job表
job id, job name, job
Job:source point, target point, source condition, target condition, select rules, custom rules,By fields

{
  "source point": "test-point4",
  "target point": "test-point6",
  "source condition": "condition111",
  "target condition": "condition111",
  "select rules": "Check-count",
  "custom rules": "aaaa",
  "fields": "testfields",
}


{
                'job_name': job_name,
                'job': {
                    "source_point": source_point,
                    "target_point": target_point,
                    "source_condition": source_condition,
                    "target_condition": target_condition,
                    "select_rules": select_rules,
                    "custom_rules": custom_rules,
                    "fields": fields,
                }



UPDATE xcheck.job_management set job='{"source_point": "test-point4","target_point": "test-point6","source_condition": "condition111","target_condition": "condition111","select_rules": "Check-count","custom_rules": "aaaa","fields": "testfields"}' where job_id=500 
 
CREATE TABLE my_table (
  id SERIAL PRIMARY KEY,
  task JSONB
);

INSERT INTO task VALUES ('{"source": "a3", "target": "b3"}');

SELECT * FROM task WHERE task->>'source' = 'a3';




create sequence xcheck.generator_job_id increment by 1 minvalue 1 no maxvalue start with 500;

CREATE TABLE IF NOT EXISTS xcheck.job_management
(
    job_id integer NOT NULL DEFAULT nextval('xcheck.generator_job_id'::regclass),
    job_name character(200) COLLATE pg_catalog."default",
    user_id integer,
    job JSONB,
    create_date timestamp without time zone,
    PRIMARY KEY (job_id)
)


INSERT INTO xcheck.job_management(job_name,user_id,job) VALUES ('jobtest1',580515,'{"source": "a3", "target": "b3"}');



















create sequence xcheck.generator_connection_id increment by 1 minvalue 1 no maxvalue start with 10000;

CREATE TABLE IF NOT EXISTS xcheck.connection_management
(
    connect_id integer NOT NULL DEFAULT nextval('xcheck.generator_connection_id'::regclass),
    connect_name character(200) COLLATE pg_catalog."default",
    user_id integer,
	dbtype character(20) COLLATE pg_catalog."default",
	connect_type character(50) COLLATE pg_catalog."default",
	host character(100) COLLATE pg_catalog."default",
	dblibrary character(100) COLLATE pg_catalog."default",
	username character(100) COLLATE pg_catalog."default",
	pwd character(100) COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    PRIMARY KEY (connect_id)
)



create sequence xcheck.generator_point_id increment by 1 minvalue 1 no maxvalue start with 500;

CREATE TABLE IF NOT EXISTS xcheck.point_management
(
    point_id integer NOT NULL DEFAULT nextval('xcheck.generator_point_id'::regclass),
    point_name character(200) COLLATE pg_catalog."default",
    user_id integer,
    connect_id integer,
    table_name character(200) COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    PRIMARY KEY (point_id)
)




function makeAjaxRequest(url, method, data) {
  return new Promise(function(resolve, reject) {
    $.ajax({
      url: url,
      method: method,
      data: data,
      success: function(result) {
        resolve(result);
      },
      error: function(error) {
        reject(error);
      }
    });
  });
}

makeAjaxRequest("first-url", "GET")
  .then(function(result) {
    // 第一个 AJAX 请求成功后执行下一个请求
    return makeAjaxRequest("second-url", "POST", { data: "some data" });
  })
  .then(function(result) {
    // 第二个 AJAX 请求成功后执行下一个请求
    return makeAjaxRequest("third-url", "GET");
  })
  .then(function(result) {
    // 第三个 AJAX 请求成功后执行下一个请求
  })
  .catch(function(error) {
    console.error(error);
  });


df -h /home

find /home -type f -size +500M -exec ls -lh {} \;


ln -s /tmp/new_folder /home/db/old_folder # 创建软链接

ln -s /dev/test111 /run/newname

从磁盘充足的/dev/test111，创建一个链接到 /run/newname 


sudo kill $(sudo lsof -t -i:5555)

pip3 install gunicorn
gunicorn -v

nohup gunicorn --preload -w 4 -b 0.0.0.0:5000 --access-logfile access.log --error-logfile error.log ginger:app


role group
user team

about Teams
https://learn.microsoft.com/en-us/microsoftteams/assign-roles-permissions


有4个词
每个词下面有解释

然后有一个流程图说明4个词之间的关系


多个user组成team：可以共享比如public test case, public connection, public point，
group初步划分为：admin(role:administrator), data test（data-engineer:Full access, data-guest:View only）,web test（web-engineer:Full access, web-guest:View only）,API test（View only, Full access）,

一个用户可以加入一个或者多个group,大权限覆盖小权限。

认证(authentication) 和授权(authorization)


