1.EDIT DELETE RESULT 可以修改为第一个字母大写。
2.没有的style全部可以删掉
3.每个都有save run,最后还有个Batch jobs run
4.添加来个下拉
5.log是上拉
6.有些图标需要引入新版本才能显示
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
7.UI算是搞完了，现在剩下，前段逻辑，后端数据，上拉 添加，下拉 log。 单删，单run

8.表设计,灌入数据,select不太好整

9. 右侧三个按钮，编辑，删除，运行，运行这个log先不做，以后想更好的方案，
目前就是run变成转圈圈的running就好，完成后给个中间弹窗。
run的时候，还是将data通过json传到后端，后端不用保存看看能不能直接跑起来。就想查数据一样。

10. Add new testcase, 进来后空荡荡。。 可以写死一个card, 然后用户网里面填，填好后点击 save就跳到case的页面。

11.优先级最高：点击run,弹出上拉log框，所有参数沿用之前。


def get_table_columns_str2(self, remove_col_list, pi):
    columns = []
    if ',' in pi:
        exclude_list = pi.split(',')
        for columnName in self.column_list:
            if columnName[0] not in remove_col_list and columnName[0].upper() not in exclude_list:
                columns.append(columnName[0].upper())
    else:
        for columnName in self.column_list:
            if columnName[0] not in remove_col_list and columnName[0] != pi:
                columns.append(columnName[0].upper())
    res = ','.join(columns)
    # self.logger.info('get_table_columns_str: ' + res)
    return res



job表
job id, job name, job
Job:source point, target point, source condition, target condition, select rules, custom rules,By fields

{
  "source point": "test-point4",
  "target point": "test-point6",
  "source condition": "condition111",
  "target condition": "condition111",
  "select rules": "Check-count",
  "custom rules": "aaaa",
  "fields": "testfields",
}


{
                'job_name': job_name,
                'job': {
                    "source_point": source_point,
                    "target_point": target_point,
                    "source_condition": source_condition,
                    "target_condition": target_condition,
                    "select_rules": select_rules,
                    "custom_rules": custom_rules,
                    "fields": fields,
                }



UPDATE xcheck.job_management set job='{"source_point": "test-point4","target_point": "test-point6","source_condition": "condition111","target_condition": "condition111","select_rules": "Check-count","custom_rules": "aaaa","fields": "testfields"}' where job_id=500 
 
CREATE TABLE my_table (
  id SERIAL PRIMARY KEY,
  task JSONB
);

INSERT INTO task VALUES ('{"source": "a3", "target": "b3"}');

SELECT * FROM task WHERE task->>'source' = 'a3';




create sequence xcheck.generator_job_id increment by 1 minvalue 1 no maxvalue start with 500;

CREATE TABLE IF NOT EXISTS xcheck.job_management
(
    job_id integer NOT NULL DEFAULT nextval('xcheck.generator_job_id'::regclass),
    job_name character(200) COLLATE pg_catalog."default",
    user_id integer,
    job JSONB,
    create_date timestamp without time zone,
    PRIMARY KEY (job_id)
)


INSERT INTO xcheck.job_management(job_name,user_id,job) VALUES ('jobtest1',580515,'{"source": "a3", "target": "b3"}');



















create sequence xcheck.generator_connection_id increment by 1 minvalue 1 no maxvalue start with 10000;

CREATE TABLE IF NOT EXISTS xcheck.connection_management
(
    connect_id integer NOT NULL DEFAULT nextval('xcheck.generator_connection_id'::regclass),
    connect_name character(200) COLLATE pg_catalog."default",
    user_id integer,
	dbtype character(20) COLLATE pg_catalog."default",
	connect_type character(50) COLLATE pg_catalog."default",
	host character(100) COLLATE pg_catalog."default",
	dblibrary character(100) COLLATE pg_catalog."default",
	username character(100) COLLATE pg_catalog."default",
	pwd character(100) COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    PRIMARY KEY (connect_id)
)



create sequence xcheck.generator_point_id increment by 1 minvalue 1 no maxvalue start with 500;

CREATE TABLE IF NOT EXISTS xcheck.point_management
(
    point_id integer NOT NULL DEFAULT nextval('xcheck.generator_point_id'::regclass),
    point_name character(200) COLLATE pg_catalog."default",
    user_id integer,
    connect_id integer,
    table_name character(200) COLLATE pg_catalog."default",
    create_date timestamp without time zone,
    PRIMARY KEY (point_id)
)




function makeAjaxRequest(url, method, data) {
  return new Promise(function(resolve, reject) {
    $.ajax({
      url: url,
      method: method,
      data: data,
      success: function(result) {
        resolve(result);
      },
      error: function(error) {
        reject(error);
      }
    });
  });
}

makeAjaxRequest("first-url", "GET")
  .then(function(result) {
    // 第一个 AJAX 请求成功后执行下一个请求
    return makeAjaxRequest("second-url", "POST", { data: "some data" });
  })
  .then(function(result) {
    // 第二个 AJAX 请求成功后执行下一个请求
    return makeAjaxRequest("third-url", "GET");
  })
  .then(function(result) {
    // 第三个 AJAX 请求成功后执行下一个请求
  })
  .catch(function(error) {
    console.error(error);
  });


df -h /home

find /home -type f -size +500M -exec ls -lh {} \;


ln -s /tmp/new_folder /home/db/old_folder # 创建软链接

ln -s /dev/test111 /run/newname

从磁盘充足的/dev/test111，创建一个链接到 /run/newname 


    Determine functional requirements and design: First, the basic functions and design of the website need to be determined, including the user interface, API specifications, test cases, etc.

    Choose development tools and technologies: Choose the appropriate development tools and technologies according to the requirements and design, such as front-end frameworks, back-end frameworks, databases, etc.

    Set up the development environment: Set up the development environment, including installing and configuring development tools, setting up server environment, etc.

    Implement front-end interface: Implement the front-end user interface according to the design, including page layout, style, interaction, etc.

    Implement back-end API: Implement the back-end API according to the API specification, including interface design, data model, business logic, etc.

    Test and debug: Perform unit testing, integration testing, and system testing to ensure that the website's functionality and performance meet the requirements.

    Deploy and launch: Deploy the website to the production environment, configure domain names and servers, launch the website, and monitor and maintain it.



    确定功能需求和设计：首先需要确定网站的基本功能和设计，包括用户界面、API规范、测试用例等。

    选择开发工具和技术：根据需求和设计选择合适的开发工具和技术，例如前端框架、后端框架、数据库等。

    搭建开发环境：搭建开发环境，包括安装和配置开发工具、搭建服务器环境等。

    实现前端界面：根据设计实现前端用户界面，包括页面布局、样式、交互等。

    实现后端API：根据API规范实现后端API，包括接口设计、数据模型、业务逻辑等。

    进行测试和调试：进行单元测试、集成测试和系统测试，确保网站的功能和性能符合要求。

    部署和上线：将网站部署到生产环境，配置域名和服务器等信息，上线网站并进行监控和维护。

